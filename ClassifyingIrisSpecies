from sklearn.datasets import load_iris
iris_dataset = load_iris()

# introduction to data
print("Keys of iris_datasets: \n{}". format(iris_dataset.keys()))
print(iris_dataset['DESCR'][:193] + "\n...")
# The value of the key target_names is an array of strings, containing the species of flower that we want
# to predict
print("Target names: {}".format(iris_dataset['target_names']))
# The value of feature_names is a list of strings, giving the description of each feature
print("Feature names: \n{}".format(iris_dataset['feature_names']))
print("Type of data: {}".format(type(iris_dataset['data'])))
print("Shape of data: {}".format(iris_dataset['data'].shape))

# Features value for the first five sample
print("First five columns of data:\n{}".format(iris_dataset['data'][:5]))

# Type of array
print("Type of target: {}".format(type(iris_dataset['target'])))

# target is a one dimensional array, with one entry per flower
print ("Shape of target: {}".format(iris_dataset['target'].shape))

# The species are encoded as integers from 0 to 2
print("Target:\n{}".format(iris_dataset['target']))

# 0 -> Setosa,  1->versicolor,  2 -> verginica

# Split the data with labels into training set and test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(iris_dataset['data'], iris_dataset['target'], random_state= 0)

# print shape of X_train, X_set, y_train and y_set
print("X_train shape: {}".format(X_train.shape))
print("y_train shape: {}".format(y_train.shape))

print("X_test shape: {}".format(X_test.shape))
print("y_test shape: {}".format(y_test.shape))


# visualization of data to find abnormalities, if any. will have to do it later.
# look into scatter plot methods



#--------------------------------------------------------------------------
#Building the k-nearest neighbour model
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors = 1)
knn.fit(X_train, y_train)

#---------------------------------------------------------------------------
# Making Prediction
import numpy as np
X_new = np.array([[5, 2.9, 1, 0.2]])
print("X_new.shape: {}".format(X_new.shape))

# To make a prediction, we call the predict method of the knn onject
prediction = knn.predict(X_new)
print("Prediction: {}".format(prediction))
print("Predicted target name: {}".format(iris_dataset["target_names"][prediction]))

#-----------------------------------------------------------------------------
# Evaluating the Model
y_pred = knn.predict(X_test)
print("Test set predictions:\n {}".format(y_pred))
print("Test set score: {:.2f}".format(np.mean(y_pred == y_test)))
print("Test set score: {:.2f}".format(knn.score(X_test, y_test)))
